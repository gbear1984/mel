proc float sphereSurfaceArea()
{
     float $bBox[] = `exactWorldBoundingBox`;
     float $oCenter[] = `objectCenter -gl`;
     float $pi = 3.14159265;
     $dXYZ  = distance2D($oCenter[0],   $bBox[0],$oCenter[1],$oCenter[1],"cXbX cYcY = ");
     $dXZY  = distance2D($oCenter[1],   $bBox[1],$oCenter[2],$oCenter[2],"cYbY cZcZ = ");
     $dYZX  = distance2D(   $bBox[1],$oCenter[1],   $bBox[2],$oCenter[2],"cZbZ cXcX = ");
     float $average = (($dXYZ+$dXZY+$dYZX)/3);
     float $surfaceArea = (4*$pi*($average*$average));
     //print ("average = "+$average+"\n");
     return $surfaceArea;
} // end sphereSurfaceArea

proc float surfaceArea2Rad(float $surfaceArea)
{
     float $pi     = 3.14159265;
     float $radius = sqrt($surfaceArea/(4*$pi));
     return $radius;
} // end surfaceArea2Rad
// Calculates the average distance between center of object and min and max bounds


proc float objectRadius(int $distanceType)
{
     float $bBox[]    = `exactWorldBoundingBox`;
     float $oCenter[] = `objectCenter -gl`;
     float $dXYZ      = 0.0;
     float $dXZY      = 0.0;
     float $dYZX      = 0.0;

     if ($distanceType < 1)
     {
        $dXYZ  = distance2D($oCenter[0],   $bBox[0],$oCenter[1],$oCenter[1],"cXbX cYcY = ");
        $dXZY  = distance2D($oCenter[1],   $bBox[1],$oCenter[2],$oCenter[2],"cYbY cZcZ = ");
        $dYZX  = distance2D(   $bBox[1],$oCenter[1],   $bBox[2],$oCenter[2],"cZbZ cXcX = ");
     }
     if ($distanceType >= 1)
     {
        $dXYZ  = distance3D($bBox[0],$oCenter[0],$bBox[1],$oCenter[1],$bBox[2],$oCenter[2],"dXYZ  = ");
        $dXZY  = distance3D($bBox[0],$oCenter[0],$bBox[2],$oCenter[2],$bBox[1],$oCenter[1],"dXZY  = ");
        $dYZX  = distance3D($bBox[1],$oCenter[1],$bBox[2],$oCenter[2],$bBox[2],$oCenter[2],"dYZX  = ");

     }
     float $average = (($dXYZ+$dXZY+$dYZX)/3);
     return $average;

} // end objectRadius

// 3d distance calculator
proc float distance3D(float $x1,float $x2,float $y1,float $y2,float $z1, float $z2, string $name)
{
     float $x = $x2-$x1;
     float $y = $y2-$y1;
     float $z = $z2-$z1;
     float $distance = sqrt(($x*$x)+($y*$y)+($z*$z));
     //print ("x "+$x+" y "+$y+" z "+$z+"\n");
     //print ($name+$distance+"\n");
     return $distance;
}// end distance
proc float distance2D(float $x1,float $x2,float $y1,float $y2, string $name)
{
     float $x = $x2-$x1;
     float $y = $y2-$y1;
     float $distance = sqrt(($x*$x)+($y*$y));
     //print ("x "+$x+" y "+$y+" z "+$z+"\n");
     //print ($name+$distance+"\n");
     return $distance;
}// end distance

proc float roundingFunction(string $inVar, int $inRDegree)
{

     string $decimalTest = "";
     float $roundUpValue = 1/(abs(`pow 10 $inRDegree`));
     int $i = 0;
     int $Dtolerance = 0;
     int $roundTest = 0;
     int $skip = 0;
     int $inVarSize = size($inVar);
     if ($inVarSize == 1)
     {
       return $inVar;
     }  
     //Detect the Decimal point
     while($decimalTest != "." && $i <= $inVarSize)
     {
           ++$i;
           $decimalTest = `substring $inVar $i $i`;
           //print ("i = "+$i+"\n");
           if($decimalTest != "." && $i > $inVarSize)
           {
             $skip = 1;
           }
     }
     $roundTest = `substring $inVar ($i+$inRDegree) ($i+$inRDegree)`;
     float $outVar = `substring $inVar 1 ($i+$inRDegree)`;
     //print ("rT = "+ $roundTest + " oV = "+$outVar+" rUV = " +$roundUpValue + "\n");
     //Round the number base on your input
     if($roundTest > 5 && $skip == 0)
     {
      $outVar = ($outVar - ($roundUpValue * $roundTest)) + ($roundUpValue * 10);
      //print ("1 oV-rT = "+($outVar - $roundTest)+" rUV = " +($roundUpValue * 10) +"\n");
      $skip = 1;
     }

     else if($roundTest == 5 && $skip == 0)
     {
      //print "2 \n";
      $skip = 1;
     }
     else if($roundTest < 5  && $skip == 0)
     {
      $outVar = $outVar - ($roundUpValue * $roundTest);
      //print ("3 rUV*rT = " +($roundUpValue * $roundTest) +" \n");
     }

     //print ("oV = " + $outVar + " i = "+$i+" \n");
     return $outVar;
}//End roundingFunction
