//EDITED 11/04/2021 V1.04 added user name space to ramp names
/*Place This file in the mel command editor
and execute it to create new color ramps*/

//////////////////OS PROCS//////////////////////////////////////////////////////////////////////
proc int seDetermineOS()
{
    
    if (`about -nt` == 1)
    {
        return 1;
    }
    if (`about -linux` == 0)
    {
        return 0;
        
    }
}

proc string seGetSceneName()
{
    string $path          = `file -q -sceneName -shortName`;
    string $scrubString   = `encodeString $path`;    
    int    $stringSize    = `size($scrubString)`;    
    int    $newStringSize =  $stringSize-3;
    string $fixedString   =  startString($path, $newStringSize);
    
    return $fixedString;   
}

 proc string seGetFilePath()
{ 
    string $filePath = (`workspace -q -rd`+"data");
    string $currentSceneName = `seGetSceneName`;
    string $coordinatesFilePath = ( $filePath +"/"+$currentSceneName+"_attrRecord.txt" );    
    //check permissions
    $dirChk    =  `filetest -w ($filePath+"/")`;
    $fileChk   =  `filetest -w $coordinatesFilePath`;
    int $debug = 0;
    if($debug == 1)
    {
        print ($coordinatesFilePath      + "\n");
        print ("Dir Check: "  + $dirChk  + "\n");
        print ("File Check: " + $fileChk + "\n");
    }
    
    return $coordinatesFilePath; 
}


////////////////STRING PROCS////////////////////////////////////////////////////////////////////////
proc int seStringToInt(string $t)//Covert String to Int
{
     int $castStringToInt = int($t);
     return $castStringToInt;  
}


proc string seAngleRecordRead(int $mode, int $version, string $filePath)
{
     //string $filepath = seGetFilePath();
     string $filepath = "";
     if($mode == 1)
     {
          $filepath = "C:/Users/smeis/Desktop/GuardianGlass/indoorReflectance_V0"+$version+".txt";        
     }
     if($mode == 2)
     {

         $filepath = "C:/Users/smeis/Desktop/GuardianGlass/outdoorReflectance_V0"+$version+".txt";
     }
     if($mode == 3)
     {
         $filepath = "C:/Users/smeis/Desktop/GuardianGlass/transmission_V0"+$version+".txt";
     }
     if($mode == 4)
     {
         $filepath = "C:/Users/smeis/Desktop/GuardianGlass/master_V0"+$version+".txt";
     }
          if($mode == 5)
     {
         $filepath = $filePath;
     }    
     string $strFileContent = "";
     string $hdFileArray[];
     $hdFile = `fopen $filepath "r"`;
     if(`filetest -w $filepath` == 1)
     {
         while(!feof($hdFile))//magic
         {
 	           $strFileContent += `fgetline $hdFile`;
         }         
         fclose $hdFile;
     }
     if(`filetest -w $filepath` == 1)
     { 
         return $strFileContent;
     }     
     if(`filetest -w $filepath` == 0)
     { 
         return "no file path found";
     }
}


////////////////COLOR RAMP PROCS//////////////////////////////////////////////////////////////////////
proc float seMagnitudeToColor(int $Magnitude)
{
    float $color = $Magnitude * 2.55;
    return $color/255;
}

proc seRamp(string $rampName)//initialize a new ramp
{
    if(objExists($rampName) == 0)
    { 
        shadingNode -asTexture ramp -name $rampName;
        shadingNode -asUtility place2dTexture -name ($rampName+"_2D");
        connectAttr ($rampName+"_2D.outUV") ($rampName+".uv");
        connectAttr ($rampName+"_2D.outUvFilterSize") ($rampName+".uvFilterSize");
    }
}

proc seSetRamp(string $rampName, float $red, float $green, float $blue, float $angle, int $j)
{
    setAttr ($rampName+".colorEntryList["+$j+"].color") -type double3 $red $green $blue;
    setAttr ($rampName+".colorEntryList["+$j+"].position") $angle; 
}

proc int seGetAngleSampling(int $mode, int $version, string $filePath)
{    
     string $file               = seAngleRecordRead($mode, $version, $filePath);
     $hdFileArray               = stringToStringArray($file, "\t");
     int $getSelectionArraySize = (size($hdFileArray));     
     return ($getSelectionArraySize/3); 
}


//////////////////MAIN PROC////////////////////////////////////////////////////////////////////////////////

proc seCreateRampFromFile(int $debug, string $userNameSpace,int $mode, int $version, int $rampVersion ,int $dataSturcture, string $filePath)//dataSturcture no longer needed
{  
  scriptEditorInfo -suppressWarnings true;
  int    $i                      = 0;
              $lumaROY = float(seStringToInt($hdFileArray[$i+ 8]))/255.00;
             
  int    $j                      = 0;
  int    $loopMax                = seGetAngleSampling($mode, $version, $filePath);
         $loopMax                = 18;
  
  string $namespace              = $userNameSpace;
  string $file                   = seAngleRecordRead($mode,$version, $filePath);
  string $stripSpecials          = "";//We are going to kill some special characters!
  string $stripSpecialsArray[];       //They are going to get it!
  string $reformatString         = "";
  
  //////////////////////RAMP CREATION NAME VARIABLES///////////////////////////////////////////////////////
  string $insideReflection_CD_Ramp   = ("insideReflection_CD_Ramp" + "_v0");
  string $insideReflection_I_Ramp    = ("insideReflection_I_Ramp"  + "_v0");
  
  string $outsideReflection_CD_Ramp  = ("outsideReflection_CD_Ramp"+ "_v0");
  string $outsideReflection_I_Ramp   = ("outsideReflection_I_Ramp" + "_v0");
  
  string $transmission_CD_Ramp       = ("transmission_CD_Ramp"     + "_v0");
  string $transmission_I_Ramp        = ("transmission_I_Ramp"      + "_v0");

  
         $hdFileArray            = stringToStringArray($file, "\t");
  int    $getSelectionArraySize  = (size($hdFileArray)); 
  float  $angle                  = 1.0/$loopMax;//Normalize Data sample increments 
  float  $angleAmount            = $angle;
  float  $red                    = 0.0;
  float  $green                  = 0.0;
  float  $blue                   = 0.0;
  float  $luma                   = 0.0;
  

  //Create ramps 
if($debug == 0)
{
  seRamp(($userNameSpace+$insideReflection_CD_Ramp+$rampVersion));
  seRamp(($userNameSpace+$insideReflection_I_Ramp+$rampVersion));

  seRamp(($userNameSpace+$outsideReflection_CD_Ramp+$rampVersion));
  seRamp(($userNameSpace+$outsideReflection_I_Ramp+$rampVersion));

  seRamp(($userNameSpace+$transmission_CD_Ramp+$rampVersion));
  seRamp(($userNameSpace+$transmission_I_Ramp+$rampVersion));
}
 
  //print $getSelectionArraySize;
  //switch to 1 if print out need list is required
  if ($debug == 1)
  {
      for($t in $hdFileArray)
      { 
           $stripSpecials = (encodeString($t));
           $removeSpecials = `tokenize $stripSpecials "\\n" $stripSpecialsArray`;   
           for($t in $stripSpecialsArray)
           {
             $reformatString = ($reformatString + $t + "\t");
             seStringToInt($t);  
           } 

      }
      print $reformatString;
      $hdStringArray = stringToStringArray($reformatString, "\t");
  }
  if ($debug == 0)
  {
      for($t in $hdFileArray)
      { 
          $stripSpecials = (encodeString($t));//Check for new line character and remove
          $removeSpecials = `tokenize $stripSpecials "\\n" $stripSpecialsArray`;   
          for($t in $stripSpecialsArray)
             {
                 //print ($t+" ");
                 $reformatString = ($reformatString + $t + "\t"); 
                 $hdStringArray = stringToStringArray($reformatString, "\t");
             } 

       }  
      while ($j <= $loopMax)
      {       
              //Set Color Data from File Read for Transmission
              $redT    = float(seStringToInt($hdFileArray[$i+ 1]))/255.00;
              $greenT  = float(seStringToInt($hdFileArray[$i+ 2]))/255.00;
              $blueT   = float(seStringToInt($hdFileArray[$i+ 3]))/255.00;
              $lumaTY  = float(seStringToInt($hdFileArray[$i+ 4]))/255.00;
              
              //Set Color Data from File Read for Outside Reflection
              $redRO   = float(seStringToInt($hdFileArray[$i+ 5]))/255.00;
              $greenRO = float(seStringToInt($hdFileArray[$i+ 6]))/255.00;
              $blueRO  = float(seStringToInt($hdFileArray[$i+ 7]))/255.00;
              $lumaROY = float(seStringToInt($hdFileArray[$i+ 8]))/255.00;
             
              //Set Color Data from File Read for Inside Reflection
              $redRI   = float(seStringToInt($hdFileArray[$i+ 9]))/255.00;
              $greenRI = float(seStringToInt($hdFileArray[$i+10]))/255.00;
              $blueRI  = float(seStringToInt($hdFileArray[$i+11]))/255.00;
              $lumaRIY = float(seStringToInt($hdFileArray[$i+12]))/255.00;
              
              //Set Ramp input position
              if(seStringToInt($hdFileArray[$i]) == 0){$angle = 0;}
              if(seStringToInt($hdFileArray[$i]) >  0){$angle = float($j*5/90.0);if($debug == 1){print $angle;}}

              seSetRamp(($userNameSpace+$insideReflection_CD_Ramp+$rampVersion),   $redRI, $greenRI, $blueRI,  $angle, $j);
              seSetRamp(($userNameSpace+$outsideReflection_CD_Ramp+$rampVersion),  $redRO, $greenRO, $blueRO,  $angle, $j);
              seSetRamp(($userNameSpace+$transmission_CD_Ramp+$rampVersion),       $redT , $greenT , $blueT,   $angle, $j);
              seSetRamp(($userNameSpace+$transmission_I_Ramp+$rampVersion),        $lumaTY,$lumaTY,  $lumaTY,  $angle, $j);
              seSetRamp(($userNameSpace+$outsideReflection_I_Ramp+$rampVersion),   $lumaROY,$lumaROY,$lumaROY, $angle, $j);
              seSetRamp(($userNameSpace+$insideReflection_I_Ramp+$rampVersion),    $lumaRIY,$lumaRIY,$lumaRIY, $angle, $j);

              //Increment Counts
              $j=$j+1;
              $i=$i+12;              
      }
    }
}

////////////////////////////PROC CALLS FOR RAMP CREATION//////////////////////////////////////////////////////////////////
seCreateRampFromFile(0 /*debug*/,
                     "AG_43_"/*NameSpace can leave blank*/,
                     5 /*Mode Which ramp 1 2 3 4 5*/,
                     1 /*Ramp File Version"*/,
                     3 /*Ramp Maya Version"*/,
                     4 /*Ramp Data Sturcture Tuple or Quad*/,
                     "C:/Users/smeis/Desktop/GuardianGlass/AG_43_Master_v01.txt" /*filepath if custom needed*/
                     );//Inside Reflection       
