//EDITED 10/20/2021
/*Place This file in the mel command editor
and execute it to create new color ramps*/

//////////////////OS PROCS//////////////////////////////////////////////////////////////////////
proc int seDetermineOS()
{
    
    if (`about -nt` == 1)
    {
        return 1;
    }
    if (`about -linux` == 0)
    {
        return 0;
        
    }
}

proc string seGetSceneName()
{
    string $path          = `file -q -sceneName -shortName`;
    string $scrubString   = `encodeString $path`;    
    int    $stringSize    = `size($scrubString)`;    
    int    $newStringSize =  $stringSize-3;
    string $fixedString   =  startString($path, $newStringSize);
    
    return $fixedString;   
}

 proc string seGetFilePath()
{ 
    string $filePath = (`workspace -q -rd`+"data");
    string $currentSceneName = `seGetSceneName`;
    string $coordinatesFilePath = ( $filePath +"/"+$currentSceneName+"_attrRecord.txt" );    
    //check permissions
    $dirChk    =  `filetest -w ($filePath+"/")`;
    $fileChk   =  `filetest -w $coordinatesFilePath`;
    int $debug = 0;
    if($debug == 1)
    {
        print ($coordinatesFilePath      + "\n");
        print ("Dir Check: "  + $dirChk  + "\n");
        print ("File Check: " + $fileChk + "\n");
    }
    
    return $coordinatesFilePath; 
}


////////////////STRING PROCS////////////////////////////////////////////////////////////////////////
proc int seStringToInt(string $t)//Covert String to Int
{
     int $castStringToInt = int($t);
     return $castStringToInt;  
}


proc string seAngleRecordRead(int $mode, int $version)
{
     //string $filepath = seGetFilePath();
     string $filepath = "";
     if($mode == 1)
     {
          $filepath = "C:/Users/smeis/Desktop/GuardianGlass/indoorReflectance_V0"+$version+".txt";        
     }
     if($mode == 2)
     {

         $filepath = "C:/Users/smeis/Desktop/GuardianGlass/outdoorReflectance_V0"+$version+".txt";
     }
     if($mode == 3)
     {
         $filepath = "C:/Users/smeis/Desktop/GuardianGlass/transmission_V0"+$version+".txt";
     }
     
     string $strFileContent = "";
     string $hdFileArray[];
     $hdFile = `fopen $filepath "r"`;
     if(`filetest -w $filepath` == 1)
     {
         while(!feof($hdFile))//magic
         {
 	           $strFileContent += `fgetline $hdFile`;
         }         
         fclose $hdFile;
     }
     if(`filetest -w $filepath` == 1)
     { 
         return $strFileContent;
     }     
     if(`filetest -w $filepath` == 0)
     { 
         return "no file path found";
     }
}


////////////////COLOR RAMP PROCS//////////////////////////////////////////////////////////////////////
proc float seMagnitudeToColor(int $Magnitude)
{
    float $color = $Magnitude * 25.5;
    return $color;
}

proc seRamp(string $rampName)//initialize a new ramp
{
    if(objExists($rampName) == 0)
    { 
        shadingNode -asTexture ramp -name $rampName;
        shadingNode -asUtility place2dTexture -name ($rampName+"_2D");
        connectAttr ($rampName+"_2D.outUV") ($rampName+".uv");
        connectAttr ($rampName+"_2D.outUvFilterSize") ($rampName+".uvFilterSize");
    }
}

proc seSetRamp(string $rampName, float $red, float $green, float $blue, float $angle, int $j)
{
    setAttr ($rampName+".colorEntryList["+$j+"].color") -type double3 $red $green $blue;
    setAttr ($rampName+".colorEntryList["+$j+"].position") $angle; 
}

proc int seGetAngleSampling(int $mode, int $version)
{    
     string $file               = seAngleRecordRead($mode, $version);
     $hdFileArray               = stringToStringArray($file, "\t");
     int $getSelectionArraySize = (size($hdFileArray));
     
     return ($getSelectionArraySize/3); 
}


//////////////////MAIN PROC////////////////////////////////////////////////////////////////////////////////

proc seCreateRampFromFile(int $debug, string $userNameSpace,int $mode, int $version, int $rampVersion ,int $dataSturcture)//data stucture is to adjust data sturcture be 3 or 4 variables per line
{
  scriptEditorInfo -suppressWarnings true;
  int    $i                      = 0;
  int    $j                      = 0;
  int    $loopMax                = seGetAngleSampling($mode, $version);
  string $namespace              = $userNameSpace;
  string $file                   = seAngleRecordRead($mode,$version);
  
  string $insideReflection_CD_Ramp   = ("insideReflection_CD_Ramp" + "_v0");
  string $insideReflection_I_Ramp    = ("insideReflection_I_Ramp"  + "_v0");
  
  string $outsideReflection_CD_Ramp  = ("outsideReflection_CD_Ramp"+ "_v0");
  string $outsideReflection_I_Ramp   = ("outsideReflection_I_Ramp" + "_v0");
  
  string $transmission_CD_Ramp       = ("transmission_CD_Ramp"     +"_v0");
  string $transmission_I_Ramp        = ("transmission_I_Ramp"      +"_v0");

         $hdFileArray            = stringToStringArray($file, "\t");
  int    $getSelectionArraySize  = (size($hdFileArray)); 
  float  $angle                  = 1.0/$loopMax;//Normalize Data sample increments 
  float  $angleAmount            = $angle;
  float  $red                    = 0.0;
  float  $green                  = 0.0;
  float  $blue                   = 0.0;
  

  //Create 
  if($mode == 1)
  {
      seRamp(($insideReflection_CD_Ramp+$rampVersion));
      seRamp(($insideReflection_I_Ramp+$rampVersion));
  }
  if($mode == 2)
  {
      seRamp(($outsideReflection_CD_Ramp+$rampVersion));
      seRamp(($outsideReflection_I_Ramp+$rampVersion));
  }
  if($mode == 3)
  {
      seRamp(($transmission_CD_Ramp+$rampVersion));
      seRamp(($transmission_I_Ramp+$rampVersion));
  }  
  //print $getSelectionArraySize;
  //switch to 1 if print out need list is required
  if ($debug == 1)
  {
      for($t in $hdFileArray)
      {         
         seStringToInt($t);
      }
  }
  if ($debug == 0)
  {
      while ($j < $loopMax)
      {
          //print (" color " + $hdFileArray[$i+1] + " " + $hdFileArray[$i+2] + " " + $hdFileArray[$i+3] + " angle " + $angleAmount + "\n")
          //seRamp("transmissionRamp");
          if($dataSturcture == 4)
          {
              $red   = float(seStringToInt($hdFileArray[$i+1]))/255.00;
              $green = float(seStringToInt($hdFileArray[$i+2]))/255.00;
              $blue  = float(seStringToInt($hdFileArray[$i+3]))/255.00;
          }
          if($dataSturcture == 3)
          {
              $red   = float($hdFileArray[$i+0])/255.00;
              $green = float($hdFileArray[$i+1])/255.00;
              $blue  = float($hdFileArray[$i+2])/255.00;
          }
          if($mode == 1)
          {
              seSetRamp(($insideReflection_CD_Ramp+$rampVersion),   $red, $green, $blue, $angleAmount, $j);
          }
          if($mode == 2)
          {
              seSetRamp(($outsideReflection_CD_Ramp+$rampVersion),  $red, $green, $blue, $angleAmount, $j);
          }
          if($mode == 3)
          {
              seSetRamp(($transmission_CD_Ramp+$rampVersion),       $red, $green, $blue, $angleAmount, $j);
          }
          print ($j+ " j "+$angleAmount+"\n");
          $j=$j+1;
          $angleAmount = $angleAmount + ($angle);
          if($dataSturcture == 4){$i=$i+3;}
          if($dataSturcture == 3){$i=$i+2;}          

          //J is used to set the color angle value in seSetRamp 
      }
    }
}

////////////////////////////PROC CALLS FOR RAMP CREATION//////////////////////////////////////////////////////////////////
seCreateRampFromFile(0 /*debug*/,
                     ""/*NameSpace can leave blank*/,
                     3 /*Mode Which ramp 1 2 3*/,
                     2 /*Ramp File Version"*/,
                     2 /*Ramp Maya Version"*/,
                     4 /*Ramp Data Sturcture Tuple or Quad*/
                     );//transmission

seCreateRampFromFile(0 /*debug*/,
                     ""/*NameSpace can leave blank*/,
                     2 /*Mode Which ramp 1 2 3*/,
                     2 /*Ramp File Version"*/,
                     3 /*Ramp Maya Version"*/,
                     4 /*Ramp Data Sturcture Tuple or Quad*/
                     );//Outside Reflection

seCreateRampFromFile(0 /*debug*/,
                     ""/*NameSpace can leave blank*/,
                     1 /*Mode Which ramp 1 2 3*/,
                     2 /*Ramp File Version"*/,
                     3 /*Ramp Maya Version"*/,
                     4 /*Ramp Data Sturcture Tuple or Quad*/
                     );//Inside Reflection                   

 }
