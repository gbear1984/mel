proc seSoloCreateCustomShapeAttr(string $Solo)
{
            if( `objExists $Solo` ) {
                addAttr -ln ("mtoa_constant_texValue")  -at long  -dv 0 `ls -shapes -dag $Solo`;
                }//if
}//proc

proc seEditCustomShapeAttr(int $id)
{
     string $getSelection[] = `ls -sl`;
     int $getSelectionArraySize = (size($getSelection));

     for ($i = 0; $i <= $getSelectionArraySize; $i++)
        {
            string $selector = ($getSelection[$i]);
            if( `objExists $getSelection[$i]` ) {
                string $shapeSelector[] = `ls -shapes -dag $selector`;
                setAttr ($shapeSelector[0] + ".mtoa_constant_texValue")  $id ;
                }//if
         }//loop
}//proc

proc seSoloEditCustomShapeAttr(string $solo, int $id)
{
                setAttr ($solo + ".mtoa_constant_texValue")  $id;

}//proc

proc int seSoloAttrExists(string $Solo)
{
            if( `objExists $Solo` ) {
                string $shapeSelector[] = `ls -shapes -dag $Solo`;
                return (`attributeQuery -node $shapeSelector[0] -exists "mtoa_constant_texValue"`);
            }//if
}//proc

proc string seSoloAttrNames(string $Solo)
{
            if( `objExists $Solo` ) {
                string $shapeSelector[] = `ls -shapes -dag $Solo`;
                return ($shapeSelector[0]);
            }//if
}//proc

proc int seSoloAttrRecorder(string $Solo)
{
            if( `objExists $Solo` ) {
                string $selector = ($Solo);
                string $shapeSelector[] = `ls -shapes -dag $selector`;
                return (`getAttr ($shapeSelector[0]+".mtoa_constant_texValue")`);
            }//if
}//proc

proc seShaderAssignment(string $soloShape, string $outgoingSG)
{
   string $currentSG = `seSoloGetSurfaceShader($soloShape)`;
   if ($currentSG != "null")
   {
        if(`isConnected ($soloShape+".instObjGroups[0]") ($currentSG +".dagSetMembers")` == 1)
        { 
            disconnectAttr -na ($soloShape+".instObjGroups[0]") ($currentSG +".dagSetMembers");   
            connectAttr -f -na ($soloShape+".instObjGroups[0]") ($outgoingSG +".dagSetMembers");
        }
    }
}

proc string seSoloGetSurfaceShader(string $Solo)//returns Material of current selection
{
            if( `objExists $Solo` ) {   
                   {
                    string $mySGs[]         = `listConnections -type shadingEngine ($Solo)`;
                    string $surfaceShader[] = `listConnections ($mySGs[0] + ".surfaceShader")`;
                    //return $surfaceShader[0];
                    return $mySGs[0];
                    }
                    return "null1";
                }
                return "null2";
}

proc string seGetSceneName()
{
    string $path = `file -q -sceneName -shortName`;
    string $scrubString = `encodeString $path`;    
    int    $stringSize    =`size($scrubString)`;    
    int    $newStringSize = $stringSize-3;
    string $fixedString = startString($path, $newStringSize);
    return $fixedString;   
}

 proc string seGetFilePath()
{ 
    string $filePath = (`workspace -q -rd`+"data");
    string $currentSceneName = `seGetSceneName`;
    string $coordinatesFilePath = ( $filePath +"/"+$currentSceneName+"_attrRecord.txt" );    
    //check permissions
    $dirChk = `filetest -w ($filePath+"/")`;
    $fileChk = `filetest -w $coordinatesFilePath`;
    int $debug = 0;
    if($debug == 1)
    {
        print ($coordinatesFilePath + "\n");
        print ("Dir Check: " + $dirChk + "\n");
        print ("File Check: " + $fileChk + "\n");
    }
    return $coordinatesFilePath; 
}

proc seCreateAttrListFile()
{    //Variable Declaration
     select -hierarchy;
     string $getSelection[]     = `ls -sl`;
     string $oldName            = "";
     string $selector           = "";
     
     int $getSelectionArraySize = (size($getSelection));
     
     //File Initialization
     string $filepath           = seGetFilePath();
     $fileId                    =`fopen $filepath "w"`;
     
     for($i = 0; $i <= $getSelectionArraySize; $i++)    
        {
            if( `objExists $getSelection[$i]` )//error check for missing selections
            {
                string $testType = seSoloAttrNames($getSelection[$i]);
                if($testType != "")
                {
                    string $testString = `objectType $testType`;
                    if( $testString != "nurbsCurve" )//filters for non_material assignable shapes
                    {
                        if(seSoloAttrNames($getSelection[$i]) != $oldName)//filters for repeat names 
                        {
                             fprint $fileId (seSoloAttrNames($getSelection[$i])+" ");
                
                            if(seSoloAttrExists($getSelection[$i]) == 0)//set texValue att to 0 if it doesn't exist
                            {
                                fprint $fileId " 0 ";
                            }
                            if(seSoloAttrExists($getSelection[$i]) == 1)
                            {
                                fprint $fileId (seSoloAttrRecorder($getSelection[$i])+" ");
                            }            
                            fprint $fileId(seSoloGetSurfaceShader(seSoloAttrNames($getSelection[$i]))+" ");
                         }//if
                     }//if
                      $oldName = (seSoloAttrNames($getSelection[$i]));       
                 }//if
            }//if
         }//loop
         fclose $fileId;
         seAssignAttrFromFile(1);//print attr list
         print ("file output to: "+$filepath);
 }//proc
 
proc string seAttrRecordRead()
{
     string $filepath = seGetFilePath();
     string $strFileContent = "";
     string $hdFileArray[];
     $hdFile = `fopen $filepath "r"`;
     if(`filetest -w $filepath` == 1)
     {
         while(!feof($hdFile))//magic
         {
 	           $strFileContent += `fgetline $hdFile`;
         }         
         fclose $hdFile;
     }
     if(`filetest -w $filepath` == 1)
     { 
         return $strFileContent;
     }     
     if(`filetest -w $filepath` == 0)
     { 
         return "no file path found";
     }
}

proc seAssignAttrFromFile(int $debug, string $userNameSpace)
{
  int $i = 0;
  string $namespace = $userNameSpace;
  string $file = seAttrRecordRead();
  $hdFileArray = stringToStringArray($file, " ");
  int $getSelectionArraySize = (size($hdFileArray)); 
  //print $getSelectionArraySize;
  //switch to 1 if print out need list is required
  if ($debug == 1)
  {
      while ($i < $getSelectionArraySize)
      {
          print  ($hdFileArray[$i] + " " + $hdFileArray[$i+1] + " " + $hdFileArray[$i+2] + "\n");  
          $i=$i+3;  
      }
  }
  if ($debug == 0)
  {
      while ($i < $getSelectionArraySize)
      {
          
          if(`objExists ($namespace+$hdFileArray[$i])`)//skip if shape doesn't exist
          {
              if(`seSoloAttrExists(($namespace+$hdFileArray[$i]))` == 0)
              {
                    seSoloCreateCustomShapeAttr(($namespace+$hdFileArray[$i]));
                    //print "seSoloCreateCustomShapeAttr";
              }
              if(`seSoloAttrExists(($namespace+$hdFileArray[$i]))` == 1)
              {    
                  //seSoloAttrExists($hdFileArray[$i+1]);
                  seSoloEditCustomShapeAttr(($namespace+$hdFileArray[$i]), $hdFileArray[$i+1]);
                  if($hdFileArray[$i+2] != "initialShadingGroup")//skip if shading group is default
                  {
                      seShaderAssignment(($namespace+$hdFileArray[$i]), $hdFileArray[$i+2]);
                      //print (($namespace+$hdFileArray[$i])+" "+$hdFileArray[$i+2]+"\n");
                  }
               }   
           }
          $i=$i+3;
          //print ($i+ " "); 
      }
    }
}
/*This file contains many scripts the only important ones are below this text

seCreateAttrListFile();
*  This command should be run on a freshly imported scene.
   it will create a file that will be used to add a custom attribute to shape nodes
   and it will also record their shader connections

seAssignAttrFromFile(0, "");
*  This command is used to add custom attributes to shape nodes and assign any existing
   materials previously recorded by seCreateAttrFile();
   
To run the commands
* first select all of this script and right click with the mouse and 
  select Execute. This will load the script into memory.

* Then select all the geometery from the outliner you want to be recorded when you run the script. 
  The top group node is probably the best.
  
* In the script window run the command seCreateAttrListFile(); 
  You can type it or just highlight it below and Execute it.
  
* After the script completes it will say a file has been created. 
  It will be in the data directory of the current project.
  
  it will look something like this 
  file output to: /jobs/ads/dairy_queen_jump_in_J603864/build/enFarmSet/m_enFarmSet/data/build_enFarmSet_testOnly_modeling_v000_s001_attrRecord.txt
  
*seAssignAttrFromFile(0, "");
To run this command you must have first run seAssignAttrFromFile on something in your current project.

if your seAssignAttrFromFile file was genereted from the current scene file
*  highlight or type seAssignAttrFromFile(0, ""); and execute the command
   this will source that file and create or assign the mota_constant_texValue to any matching shape nodes found
   and assign any matching materials to current geo

if your seAssignAttrFromFile was generated in another file then tell me and I will give a hardcode path workaround.


*/
//seCreateAttrListFile();
//seAssignAttrFromFile(0, "");
