proc string seGetSceneName()
{
    string $path = `file -q -sceneName -shortName`;
    string $scrubString = `encodeString $path`;    
    int    $stringSize    =`size($scrubString)`;    
    int    $newStringSize = $stringSize-3;
    string $fixedString = startString($path, $newStringSize);
    return $fixedString;   
}

 proc string seGetFilePath()
{ 
    string $filePath = (`workspace -q -rd`+"data");
    string $currentSceneName = `seGetSceneName`;
    string $coordinatesFilePath = ( $filePath +"/"+$currentSceneName+"_attrRecord.txt" );    
    //check permissions
    $dirChk = `filetest -w ($filePath+"/")`;
    $fileChk = `filetest -w $coordinatesFilePath`;
    int $debug = 0;
    if($debug == 1)
    {
        print ($coordinatesFilePath + "\n");
        print ("Dir Check: " + $dirChk + "\n");
        print ("File Check: " + $fileChk + "\n");
    }
    return $coordinatesFilePath; 
}
proc string seAttrRecordRead()
{
     //string $filepath = seGetFilePath();
     //string $filepath = "C:/Users/smeis/Desktop/outdoorReflectance.txt";
     string $filepath = "C:/Users/smeis/Desktop/transmission.txt";
     string $strFileContent = "";
     string $hdFileArray[];
     $hdFile = `fopen $filepath "r"`;
     if(`filetest -w $filepath` == 1)
     {
         while(!feof($hdFile))//magic
         {
 	           $strFileContent += `fgetline $hdFile`;
         }         
         fclose $hdFile;
     }
     if(`filetest -w $filepath` == 1)
     { 
         return $strFileContent;
     }     
     if(`filetest -w $filepath` == 0)
     { 
         return "no file path found";
     }
}
proc seRamp(string $rampName)
{
    shadingNode -asTexture ramp -name $rampName;
    //$rampName = "rampName";
    shadingNode -asUtility place2dTexture -name ($rampName+"2D");
    connectAttr ($rampName+"2D.outUV") ($rampName+".uv");
    connectAttr ($rampName+"2D.outUvFilterSize") ($rampName+".uvFilterSize");
}


proc seSetRamp(string $rampName, float $red, float $green, float $blue, float $angle, int $j)
{
    setAttr ($rampName+".colorEntryList["+$j+"].color") -type double3 $red $green $blue;
    setAttr ($rampName+".colorEntryList["+$j+"].position") $angle; 
}
//seRamp("testRamp");
//seSetRamp("testRamp", 1.0, .6, .3, .323, 2);
//seSetRamp("testRamp", 1.0, .3, .1, .5, 3);
proc seAssignAttrFromFile(int $debug, string $userNameSpace)
{
  int    $i = 0;
  int    $j = 0;
  string $namespace = $userNameSpace;
  string $file = seAttrRecordRead();
         $hdFileArray = stringToStringArray($file, "\t");
  int    $getSelectionArraySize = (size($hdFileArray)); 
  float  $angleAmount = 0.0;
  float  $angle = 1.0/90.0;
  float  $red   = 0.0;
  float  $green = 0.0;
  float  $blue  = 0.0;
  //print $getSelectionArraySize;
  //switch to 1 if print out need list is required
  if ($debug == 1)
  {
      while ($i < $getSelectionArraySize)
      {
          print  ($hdFileArray[$i+1] + " " + $hdFileArray[$i+2] + " " + $hdFileArray[$i+3] + "\n");  
          $i=$i+4;  
      }
  }
  if ($debug == 0)
  {
      while ($i < $getSelectionArraySize)
      {
          //print (" color " + $hdFileArray[$i+1] + " " + $hdFileArray[$i+2] + " " + $hdFileArray[$i+3] + " angle " + $angleAmount + "\n")
          //seRamp("transmissionRamp");
          $red   = float($hdFileArray[$i+1])/255.00;
          $green = float($hdFileArray[$i+2])/255.00;
          $blue  = float($hdFileArray[$i+3])/255.00;
          seSetRamp("transmissionRamp", $red, $green, $blue, $angleAmount, $j);
          $angleAmount = $angleAmount + ($angle);
          $i=$i+3;
          $j=$j+1;
          //print ($i + " i \n"); 
      }
    }
}
seAssignAttrFromFile(0, "");
